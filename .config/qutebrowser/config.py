# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# How to open links in an existing instance if a new one is launched.
# This happens when e.g. opening a link from a terminal. See
# `new_instance_open_target_window` to customize in which window the
# link is opened in.
# Type: String
# Valid values:
#   - tab: Open a new tab in the existing window and activate the window.
#   - tab-bg: Open a new background tab in the existing window and activate the window.
#   - tab-silent: Open a new tab in the existing window without activating the window.
#   - tab-bg-silent: Open a new background tab in the existing window without activating the window.
#   - window: Open in a new window.
c.new_instance_open_target = 'tab-bg'

# Size (in bytes) of the HTTP network cache. Null to use the default
# value. With QtWebEngine, the maximum supported value is 2147483647 (~2
# GB).
# Type: Int
c.content.cache.size = 52428800

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
c.content.headers.accept_language = 'en-US,en;q=0.5'

# Custom headers for qutebrowser HTTP requests.
# Type: Dict
c.content.headers.custom = {'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}

# User agent to send. Unset to send the default. Note that the value
# read from JavaScript is always the global value.
# Type: String
c.content.headers.user_agent = 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0'

# Enable host blocking.
# Type: Bool
c.content.host_blocking.enabled = False

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Enable WebGL.
# Type: Bool
c.content.webgl = False

# Height (in pixels or as percentage of the window) of the completion.
# Type: PercOrInt
c.completion.height = '30%'

# Number of URLs to show in the web history. 0: no history / -1:
# unlimited
# Type: Int
c.completion.web_history.max_items = 1000

# Directory to save downloads to. If unset, a sensible OS-specific
# default is used.
# Type: Directory
c.downloads.location.directory = '/home/fiplo/Downloads'

# Duration (in milliseconds) to wait before removing finished downloads.
# If set to -1, downloads are never removed.
# Type: Int
c.downloads.remove_finished = 100

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['urxvt', '-title', 'scratchpad', '-geometry', '86x24+40+60', '-e', 'vim', '-f', '{}']

# CSS border value for hints.
# Type: String
c.hints.border = '1px solid #CCCCCC'

# Characters used for hint strings.
# Type: UniqueCharString
c.hints.chars = '123456789'

# Minimum number of characters used for hint strings.
# Type: Int
c.hints.min_chars = 1

# Mode to use for hints.
# Type: String
# Valid values:
#   - number: Use numeric hints. (In this mode you can also type letters from the hinted element to filter and reduce the number of elements that are hinted.)
#   - letter: Use the characters in the `hints.chars` setting.
#   - word: Use hints words based on the html elements and the extra words.
c.hints.mode = 'number'

# Timeout (in milliseconds) for partially typed key bindings. If the
# current input forms only partial matches, the keystring will be
# cleared after this time.
# Type: Int
c.input.partial_timeout = 2000

# Keychains that shouldn't be shown in the keyhint dialog. Globs are
# supported, so `;*` will blacklist all keychains starting with `;`. Use
# `*` to disable keyhints.
# Type: List of String
c.keyhint.blacklist = ['*']

# Show a filebrowser in upload/download prompts.
# Type: Bool
c.prompt.filebrowser = False

# Open new tabs (middleclick/ctrl+click) in the background.
# Type: Bool
c.tabs.background = True

# When to show favicons in the tab bar.
# Type: String
# Valid values:
#   - always: Always show favicons.
#   - never: Always hide favicons.
#   - pinned: Show favicons only on pinned tabs.
c.tabs.favicons.show = 'never'

# Position of new tabs opened from another tab. See
# `tabs.new_position.stacking` for controlling stacking behavior.
# Type: NewTabPosition
# Valid values:
#   - prev: Before the current tab.
#   - next: After the current tab.
#   - first: At the beginning.
#   - last: At the end.
c.tabs.new_position.related = 'last'

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'right'

# Format to use for the tab title. The following placeholders are
# defined:  * `{perc}`: Percentage as a string like `[10%]`. *
# `{perc_raw}`: Raw percentage, e.g. `10`. * `{title}`: Title of the
# current web page. * `{title_sep}`: The string ` - ` if a title is set,
# empty otherwise. * `{index}`: Index of this tab. * `{id}`: Internal
# tab ID of this tab. * `{scroll_pos}`: Page scroll position. *
# `{host}`: Host of the current web page. * `{backend}`: Either
# ''webkit'' or ''webengine'' * `{private}`: Indicates when private mode
# is enabled. * `{current_url}`: URL of the current web page. *
# `{protocol}`: Protocol (http/https/...) of the current web page. *
# `{audio}`: Indicator for audio/mute status.
# Type: FormatString
c.tabs.title.format = '{title}'

# Width (in pixels or as percentage of the window) of the tab bar if
# it's vertical.
# Type: PercOrInt
c.tabs.width = '10%'

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'file:///home/fiplo/.Xresources.d/firefox/startpages/start.html'
c.url.start_pages = ["file:///home/fiplo/.Xresources.d/firefox/startpages/start.html"]

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'a': 'https://wiki.archlinux.org/?search={}', 'd': 'https://duckduckgo.com/?q={}', 'g': 'http://www.google.com/search?hl=en&source=hp&ie=ISO-8859-l&q={}', 'y': 'https://www.youtube.com/results?search_query={}', 'w': 'https://secure.wikimedia.org/wikipedia/en/w/index.php?title=Special%%3ASearch&search={}', 'gh': 'https://github.com/search?q={}&type=Code'}

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = '#899CA1'

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#3b4252'

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = '#3b4252'

# Foreground color of completion widget category headers.
# Type: QtColor
c.colors.completion.category.fg = '#F2F2F2'

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = '#555555'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = '#2e3440'

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = '#2e3440'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = 'white'

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = '#333333'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.item.selected.border.top = '#333333'

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = '#333333'

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = '#F2F2F2'

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = '#e5e9f0'

# Color of the scrollbar in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.bg = '#3b4252'

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = '#2e3440'

# Color gradient start for download text.
# Type: QtColor
c.colors.downloads.start.fg = 'black'

# Color gradient start for download backgrounds.
# Type: QtColor
c.colors.downloads.start.bg = '#BFBFBF'

# Color gradient end for download text.
# Type: QtColor
c.colors.downloads.stop.fg = 'black'

# Color gradient stop for download backgrounds.
# Type: QtColor
c.colors.downloads.stop.bg = '#F0F0F0'

# Color gradient interpolation system for download backgrounds.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.downloads.system.bg = 'none'

# Foreground color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.fg = '#e5e9f0'

# Background color for downloads with errors.
# Type: QtColor
c.colors.downloads.error.bg = '#bf616a'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = '#2e3440'

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = '#CCCCCC'

# Font color for the matched part of hints.
# Type: QssColor
c.colors.hints.match.fg = '#000'

# Text color for the keyhint widget.
# Type: QssColor
c.colors.keyhint.fg = '#FFFFFF'

# Highlight color for keys to complete the current keychain.
# Type: QssColor
c.colors.keyhint.suffix.fg = '#FFFF00'

# Background color of the keyhint widget.
# Type: QssColor
c.colors.keyhint.bg = 'rgba(0, 0, 0, 80%)'

# Foreground color of an error message.
# Type: QssColor
c.colors.messages.error.fg = '#e5e9f0'

# Background color of an error message.
# Type: QssColor
c.colors.messages.error.bg = '#8A2F58'

# Border color of an error message.
# Type: QssColor
c.colors.messages.error.border = '#8A2F58'

# Foreground color of a warning message.
# Type: QssColor
c.colors.messages.warning.fg = '#e5e9f0'

# Background color of a warning message.
# Type: QssColor
c.colors.messages.warning.bg = '#BF85CC'

# Border color of a warning message.
# Type: QssColor
c.colors.messages.warning.border = '#BF85CC'

# Foreground color of an info message.
# Type: QssColor
c.colors.messages.info.fg = '#e5e9f0'

# Background color of an info message.
# Type: QssColor
c.colors.messages.info.bg = '#333333'

# Border color of an info message.
# Type: QssColor
c.colors.messages.info.border = '#88c0d0'

# Foreground color for prompts.
# Type: QssColor
c.colors.prompts.fg = '#333333'

# Border used around UI elements in prompts.
# Type: String
c.colors.prompts.border = '1px solid #2e3440'

# Background color for prompts.
# Type: QssColor
c.colors.prompts.bg = '#DDDDDD'

# Background color for the selected item in filename prompts.
# Type: QssColor
c.colors.prompts.selected.bg = '#4779B3'

# Foreground color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.fg = '#899CA1'

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = '#222222'

# Foreground color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.fg = '#899CA1'

# Background color of the statusbar in insert mode.
# Type: QssColor
c.colors.statusbar.insert.bg = '#222222'

# Foreground color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.fg = '#e5e9f0'

# Background color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.bg = '#4779B3'

# Foreground color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.fg = '#e5e9f0'

# Background color of the statusbar in private browsing mode.
# Type: QssColor
c.colors.statusbar.private.bg = '#4c566a'

# Foreground color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.fg = '#F0F0F0'

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = '#555555'

# Foreground color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.fg = '#e5e9f0'

# Background color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.bg = '#434c5e'

# Foreground color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.fg = '#e5e9f0'

# Background color of the statusbar in caret mode.
# Type: QssColor
c.colors.statusbar.caret.bg = '#5E468C'

# Foreground color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.fg = 'white'

# Background color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.bg = '#b48ead'

# Background color of the progress bar.
# Type: QssColor
c.colors.statusbar.progress.bg = '#333333'

# Default foreground color of the URL in the statusbar.
# Type: QssColor
c.colors.statusbar.url.fg = '#899CA1'

# Foreground color of the URL in the statusbar on error.
# Type: QssColor
c.colors.statusbar.url.error.fg = '#8A2F58'

# Foreground color of the URL in the statusbar for hovered links.
# Type: QssColor
c.colors.statusbar.url.hover.fg = '#2B7694'

# Foreground color of the URL in the statusbar on successful load
# (http).
# Type: QssColor
c.colors.statusbar.url.success.http.fg = '#899CA1'

# Foreground color of the URL in the statusbar on successful load
# (https).
# Type: QssColor
c.colors.statusbar.url.success.https.fg = '#53A6A6'

# Foreground color of the URL in the statusbar when there's a warning.
# Type: QssColor
c.colors.statusbar.url.warn.fg = '#914E89'

# Background color of the tab bar.
# Type: QtColor
c.colors.tabs.bar.bg = '#222222'

# Color gradient start for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.start = '#222222'

# Color gradient end for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.stop = '#222222'

# Color for the tab indicator on errors.
# Type: QtColor
c.colors.tabs.indicator.error = '#8A2F58'

# Color gradient interpolation system for the tab indicator.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.tabs.indicator.system = 'none'

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = '#899CA1'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#222222'

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = '#899CA1'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#222222'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = 'white'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = '#222222'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = 'white'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = '#222222'

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '8pt Noto Sans Mono'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = '8pt Noto Sans Mono'

# Font used for the downloadbar.
# Type: Font
c.fonts.downloads = '8pt Noto Sans Mono'

# Font used for the hints.
# Type: Font
c.fonts.hints = '13px Noto Sans Mono'

# Font used in the keyhint widget.
# Type: Font
c.fonts.keyhint = '7pt Noto Sans Mono'

# Font used for error messages.
# Type: Font
c.fonts.messages.error = '7pt Noto Sans Mono'

# Font used for info messages.
# Type: Font
c.fonts.messages.info = '7pt Noto Sans Mono'

# Font used for warning messages.
# Type: Font
c.fonts.messages.warning = '7pt Noto Sans Mono'

# Font used for prompts.
# Type: Font
c.fonts.prompts = '8pt Noto Sans Mono'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '8pt Noto Sans Mono'

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = '7pt Noto Sans Mono'

# Bindings for normal mode
config.bind('M', 'hint links spawn mpv {hint-url}')
config.bind('U', 'hint links spawn wget -P /home/fiplo/Downloads/dumpster/ {hint-url}')
config.bind('m', 'spawn mpv {url}')
